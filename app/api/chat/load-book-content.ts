/* eslint-disable @typescript-eslint/no-unused-vars */
import { createComponentClient } from "@/models/supabase";
import fs from 'fs';
import path from 'path';

// Cache global para o conte√∫do do livro
let bookContentCache: BookContent | null = null;

export interface BookContent {
  id: number;
  title: string;
  author: string;
  extracted_at: string;
  full_content: string;
  original_content: string;
  total_characters: number;
  total_words: number;
  sections: Array<{
    title: string;
    content: string;
    keywords: string[];
  }>;
}

// Fun√ß√£o para salvar o conte√∫do do livro no Supabase
export async function saveBookContentToSupabase(): Promise<boolean> {
  try {
    console.log('üíæ Salvando conte√∫do do livro no Supabase...');
    
    const livroPath = path.join(process.cwd(), 'data', 'livro-adventismo-cabo-verde.txt');
    
    if (!fs.existsSync(livroPath)) {
      console.error('‚ùå Arquivo do livro n√£o encontrado!');
      return false;
    }
    
    const content = fs.readFileSync(livroPath, 'utf-8');
    
    // Dividir em se√ß√µes baseado na estrutura completa do livro
    const sections: Array<{title: string, content: string, keywords: string[]}> = [];
    
    // 1. FICHA T√âCNICA
    const fichaTecnicaMatch = content.match(/Ficha T√©cnica[\s\S]*?(?=Dedicat√≥ria|Cap√≠tulo|$)/i);
    if (fichaTecnicaMatch) {
      sections.push({
        title: "üìã FICHA T√âCNICA",
        content: fichaTecnicaMatch[0].trim(),
        keywords: extractKeywords(fichaTecnicaMatch[0])
      });
    }
    
    // 2. DEDICAT√ìRIA
    const dedicatoriaMatch = content.match(/Dedicat√≥ria[\s\S]*?(?=Agradecimentos|Cap√≠tulo|$)/i);
    if (dedicatoriaMatch) {
      sections.push({
        title: "üíù DEDICAT√ìRIA",
        content: dedicatoriaMatch[0].trim(),
        keywords: extractKeywords(dedicatoriaMatch[0])
      });
    }
    
    // 3. AGRADECIMENTOS
    const agradecimentosMatch = content.match(/Agradecimentos[\s\S]*?(?=Pref√°cio|Cap√≠tulo|$)/i);
    if (agradecimentosMatch) {
      sections.push({
        title: "üôè AGRADECIMENTOS",
        content: agradecimentosMatch[0].trim(),
        keywords: extractKeywords(agradecimentosMatch[0])
      });
    }
    
    // 4. PREF√ÅCIO
    const prefacioMatch = content.match(/Pref√°cio[\s\S]*?(?=Nota|Cap√≠tulo|$)/i);
    if (prefacioMatch) {
      sections.push({
        title: "üìñ PREF√ÅCIO",
        content: prefacioMatch[0].trim(),
        keywords: extractKeywords(prefacioMatch[0])
      });
    }
    
    // 5. NOTA
    const notaMatch = content.match(/Nota[\s\S]*?(?=Resumo|Cap√≠tulo|$)/i);
    if (notaMatch) {
      sections.push({
        title: "üìù NOTA",
        content: notaMatch[0].trim(),
        keywords: extractKeywords(notaMatch[0])
      });
    }
    
    // 6. RESUMO
    const resumoMatch = content.match(/Resumo[\s\S]*?(?=Abstract|Cap√≠tulo|$)/i);
    if (resumoMatch) {
      sections.push({
        title: "üìã RESUMO",
        content: resumoMatch[0].trim(),
        keywords: extractKeywords(resumoMatch[0])
      });
    }
    
    // 7. ABSTRACT
    const abstractMatch = content.match(/Abstract[\s\S]*?(?=Cap√≠tulo|$)/i);
    if (abstractMatch) {
      sections.push({
        title: "üåç ABSTRACT",
        content: abstractMatch[0].trim(),
        keywords: extractKeywords(abstractMatch[0])
      });
    }
    
    // 8. CAP√çTULOS
    const chapterMatches = content.match(/CAP√çTULO\s+[IVX]+\s*[‚Äì-]\s*([^\n]+)/gi);
    if (chapterMatches) {
      chapterMatches.forEach((match, index) => {
        const title = match.trim();
        const startIndex = content.indexOf(match);
        const endIndex = index < chapterMatches.length - 1 
          ? content.indexOf(chapterMatches[index + 1]) 
          : content.length;
        
        const sectionContent = content.substring(startIndex, endIndex).trim();
        
        sections.push({
          title: title,
          content: sectionContent,
          keywords: extractKeywords(title + ' ' + sectionContent)
        });
      });
    }
    
    // 9. BIBLIOGRAFIA
    const bibliografiaMatch = content.match(/Bibliografia[\s\S]*?(?=Anexos|$)/i);
    if (bibliografiaMatch) {
      sections.push({
        title: "üìö BIBLIOGRAFIA",
        content: bibliografiaMatch[0].trim(),
        keywords: extractKeywords(bibliografiaMatch[0])
      });
    }
    
    // 10. ANEXOS
    const anexosMatch = content.match(/Anexos[\s\S]*?$/i);
    if (anexosMatch) {
      sections.push({
        title: "üìé ANEXOS",
        content: anexosMatch[0].trim(),
        keywords: extractKeywords(anexosMatch[0])
      });
    }
    
    // Se n√£o encontrou se√ß√µes estruturadas, dividir por par√°grafos
    if (sections.length === 0) {
      const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 100);
      paragraphs.forEach((paragraph, index) => {
        if (paragraph.trim()) {
          const lines = paragraph.trim().split('\n');
          const title = lines[0]?.trim().substring(0, 100) || `Par√°grafo ${index + 1}`;
          const content = paragraph.trim();
          
          sections.push({
            title: title,
            content: content,
            keywords: extractKeywords(title + ' ' + content)
          });
        }
      });
    }
    
    const bookData = {
      title: "O que dizer dos adventistas em Cabo Verde",
      author: "Karl Marx Morgan Lima Monteiro",
      extracted_at: new Date().toISOString(),
      full_content: content,
      original_content: content,
      total_characters: content.length,
      total_words: content.split(/\s+/).length,
      sections: sections
    };
    
    // Salvar no Supabase
    const supabase = createComponentClient();
    
    await supabase.from('book_content').delete().neq('id', 0);
    
    // Inserir novo conte√∫do
    console.log('üìù Inserindo novo conte√∫do...');
    const { data, error } = await supabase
      .from('book_content')
      .insert([bookData])
      .select();
    
    if (error) {
      console.error('‚ùå Erro ao salvar no Supabase:', error);
      return false;
    }
    
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar conte√∫do do livro:', error);
    return false;
  }
}

export async function loadBookContent(): Promise<BookContent | null> {
  // Retornar cache se dispon√≠vel
  if (bookContentCache) {
    return bookContentCache;
  }

  try {
    // Primeiro, tentar carregar do arquivo local
    const livroPath = path.join(process.cwd(), 'data', 'livro-adventismo-cabo-verde.txt');
    
    if (fs.existsSync(livroPath)) {
      console.log('‚úÖ Carregando conte√∫do do arquivo local...');
      const content = fs.readFileSync(livroPath, 'utf-8');
      
      // Dividir em se√ß√µes baseado na estrutura completa do livro
      const sections: Array<{title: string, content: string, keywords: string[]}> = [];
      
      // 1. FICHA T√âCNICA
      const fichaTecnicaMatch = content.match(/Ficha T√©cnica[\s\S]*?(?=Dedicat√≥ria|Cap√≠tulo|$)/i);
      if (fichaTecnicaMatch) {
        sections.push({
          title: "üìã FICHA T√âCNICA",
          content: fichaTecnicaMatch[0].trim(),
          keywords: extractKeywords(fichaTecnicaMatch[0])
        });
      }
      
      // 2. DEDICAT√ìRIA
      const dedicatoriaMatch = content.match(/Dedicat√≥ria[\s\S]*?(?=Agradecimentos|Cap√≠tulo|$)/i);
      if (dedicatoriaMatch) {
        sections.push({
          title: "üíù DEDICAT√ìRIA",
          content: dedicatoriaMatch[0].trim(),
          keywords: extractKeywords(dedicatoriaMatch[0])
        });
      }
      
      // 3. AGRADECIMENTOS
      const agradecimentosMatch = content.match(/Agradecimentos[\s\S]*?(?=Pref√°cio|Cap√≠tulo|$)/i);
      if (agradecimentosMatch) {
        sections.push({
          title: "üôè AGRADECIMENTOS",
          content: agradecimentosMatch[0].trim(),
          keywords: extractKeywords(agradecimentosMatch[0])
        });
      }
      
      // 4. PREF√ÅCIO
      const prefacioMatch = content.match(/Pref√°cio[\s\S]*?(?=Nota|Cap√≠tulo|$)/i);
      if (prefacioMatch) {
        sections.push({
          title: "üìñ PREF√ÅCIO",
          content: prefacioMatch[0].trim(),
          keywords: extractKeywords(prefacioMatch[0])
        });
      }
      
      // 5. NOTA
      const notaMatch = content.match(/Nota[\s\S]*?(?=Resumo|Cap√≠tulo|$)/i);
      if (notaMatch) {
        sections.push({
          title: "üìù NOTA",
          content: notaMatch[0].trim(),
          keywords: extractKeywords(notaMatch[0])
        });
      }
      
      // 6. RESUMO
      const resumoMatch = content.match(/Resumo[\s\S]*?(?=Abstract|Cap√≠tulo|$)/i);
      if (resumoMatch) {
        sections.push({
          title: "üìã RESUMO",
          content: resumoMatch[0].trim(),
          keywords: extractKeywords(resumoMatch[0])
        });
      }
      
      // 7. ABSTRACT
      const abstractMatch = content.match(/Abstract[\s\S]*?(?=Cap√≠tulo|$)/i);
      if (abstractMatch) {
        sections.push({
          title: "üåç ABSTRACT",
          content: abstractMatch[0].trim(),
          keywords: extractKeywords(abstractMatch[0])
        });
      }
      
      // 8. CAP√çTULOS
      const chapterMatches = content.match(/CAP√çTULO\s+[IVX]+\s*[‚Äì-]\s*([^\n]+)/gi);
      if (chapterMatches) {
        chapterMatches.forEach((match, index) => {
          const title = match.trim();
          const startIndex = content.indexOf(match);
          const endIndex = index < chapterMatches.length - 1 
            ? content.indexOf(chapterMatches[index + 1]) 
            : content.length;
          
          const sectionContent = content.substring(startIndex, endIndex).trim();
          
          sections.push({
            title: title,
            content: sectionContent,
            keywords: extractKeywords(title + ' ' + sectionContent)
          });
        });
      }
      
      // 9. BIBLIOGRAFIA
      const bibliografiaMatch = content.match(/Bibliografia[\s\S]*?(?=Anexos|$)/i);
      if (bibliografiaMatch) {
        sections.push({
          title: "üìö BIBLIOGRAFIA",
          content: bibliografiaMatch[0].trim(),
          keywords: extractKeywords(bibliografiaMatch[0])
        });
      }
      
      // 10. ANEXOS
      const anexosMatch = content.match(/Anexos[\s\S]*?$/i);
      if (anexosMatch) {
        sections.push({
          title: "üìé ANEXOS",
          content: anexosMatch[0].trim(),
          keywords: extractKeywords(anexosMatch[0])
        });
      }
      
      // Se n√£o encontrou se√ß√µes estruturadas, dividir por par√°grafos
      if (sections.length === 0) {
        const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 100);
        paragraphs.forEach((paragraph, index) => {
          if (paragraph.trim()) {
            const lines = paragraph.trim().split('\n');
            const title = lines[0]?.trim().substring(0, 100) || `Par√°grafo ${index + 1}`;
            const content = paragraph.trim();
            
            sections.push({
              title: title,
              content: content,
              keywords: extractKeywords(title + ' ' + content)
            });
          }
        });
      }
      
      const bookContent = {
        id: 1,
        title: "O que dizer dos adventistas em Cabo Verde",
        author: "Karl Marx Morgan Lima Monteiro",
        extracted_at: new Date().toISOString(),
        full_content: content,
        original_content: content,
        total_characters: content.length,
        total_words: content.split(/\s+/).length,
        sections: sections
      };
      
      // Cache o resultado
      bookContentCache = bookContent;
      return bookContent;
    }
    
    // Se n√£o encontrar o arquivo local, tentar do Supabase
    console.log('üìö Carregando conte√∫do do Supabase...');
    const supabase = createComponentClient();
    
    const { data, error } = await supabase
      .from('book_content')
      .select('*')
      .single();
    
    if (error) {
      console.error('Erro ao carregar conte√∫do do livro:', error);
      return null;
    }
    
    // Cache o resultado do Supabase
    bookContentCache = data;
    return data;
  } catch (error) {
    console.error('Erro ao carregar conte√∫do do livro:', error);
    return null;
  }
}

// Fun√ß√£o para extrair palavras-chave
function extractKeywords(text: string): string[] {
  const keywords = [
    'pioneiros', 'fundadores', 'mission√°rios', 'igreja', 'congrega√ß√£o',
    'pastores', 'l√≠deres', 'eventos', 'confer√™ncias', 'educa√ß√£o',
    'escolas', 'miss√£o', 'evangelismo', 'crescimento', 'desenvolvimento',
    'doutrinas', 'ensino', 'organiza√ß√£o', 'jovens', 'mulheres',
    'm√∫sica', 'publica√ß√µes', 'sa√∫de', 'comunidade', 'denomina√ß√µes',
    'datas', 'locais', 'nomes', 'hist√≥ria', 'adventismo', 'cabo verde',
    'praia', 'mindelo', 'santiago', 's√£o vicente', 'fogo', 'brava',
    'santo ant√£o', 's√£o nicolau', '1923', '1927', '1930', '1940',
    '1950', '1960', '1970', '1975', '1980', '1990', '2000', '2010', '2020',
    // Nomes reais mencionados no livro
    'ant√≥nio gomes', 'alberto raposo', 'joaquim morgado', 'ernesto ferreira',
    'manuel andrade', 'nh√¥ mocho', 'nazar√© raposo', 'milca raposo',
    'jo√£o dias', 'olavo dos santos', 'alexandrino rodrigues', 'domingos sanches',
    'jo√£o f√©lix monteiro', 'marcos da rosa', 'crisolito abreu', 'guilherme vieira lima',
    'artur villares', 'joaquim tango', 'karl marx monteiro', 'irlando pereira de pina',
    // Datas importantes
    '1892', '1933', '1934', '1935', '1936', '1941', '1946', '1951', '2009', '2010', '2012',
    // Locais espec√≠ficos
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ferreiros',
    'calif√≥rnia', 'hawai', 'estados unidos', 'brasil', 's√£o paulo', 's√£o tom√© e pr√≠ncipe',
    // Informa√ß√µes espec√≠ficas sobre a primeira igreja
    'primeira igreja', 'primeira congrega√ß√£o', 'primeiro templo', 'primeiro batismo',
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ilha brava',
    'ant√≥nio j gomes', 'pastor alberto raposo', 'primeiro pastor', '1935', '1936',
    'primeira miss√£o', 'primeira escola adventista', 'primeira associa√ß√£o'
  ];

  return keywords.filter(keyword => 
    text.toLowerCase().includes(keyword.toLowerCase())
  );
}

export function searchBookContent(content: BookContent, query: string): string {
  const searchTerms = query.toLowerCase().split(' ');
  
  // Buscar nas se√ß√µes primeiro (mais estruturado)
  const relevantSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return searchTerms.some(term => sectionText.includes(term));
  });
  
  if (relevantSections.length > 0) {
    // Ordenar por relev√¢ncia (se√ß√µes com mais termos encontrados primeiro)
    const scoredSections = relevantSections.map(section => {
      const sectionText = (section.title + ' ' + section.content).toLowerCase();
      const score = searchTerms.filter(term => sectionText.includes(term)).length;
      return { section, score };
    }).sort((a, b) => b.score - a.score);
    
    // Retornar as se√ß√µes mais relevantes
    return scoredSections.map(({ section }) => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  // Se n√£o encontrou nas se√ß√µes, buscar no conte√∫do completo
  const fullContent = content.full_content.toLowerCase();
  const hasRelevantContent = searchTerms.some(term => fullContent.includes(term));
  
  if (hasRelevantContent) {
    // Buscar contexto espec√≠fico ao redor dos termos encontrados
    let relevantContent = '';
    const foundTerms = searchTerms.filter(term => fullContent.includes(term));
    
    foundTerms.forEach(term => {
      if (fullContent.includes(term)) {
        const termIndex = content.full_content.toLowerCase().indexOf(term);
        const startIndex = Math.max(0, termIndex - 2000);
        const endIndex = Math.min(content.full_content.length, termIndex + 3000);
        const context = content.full_content.substring(startIndex, endIndex);
        relevantContent += context + '\n\n';
      }
    });
    
    if (relevantContent) {
      return relevantContent;
    }
  }
  
  // Se n√£o encontrou nada espec√≠fico, retornar o conte√∫do completo
  return content.full_content;
}

export function getRelevantContent(content: BookContent, userMessage: string): string {
  const query = userMessage.toLowerCase();
  
  // Busca espec√≠fica para primeiros mission√°rios e fundadores
  if (query.includes('primeiros') && (query.includes('mission√°rios') || query.includes('fundadores') || query.includes('pioneiros'))) {
    return searchForMissionaries(content);
  }
  
  // Busca espec√≠fica para nomes de pessoas
  const names = ['ant√≥nio gomes', 'alberto raposo', 'am√©rico rodrigues', 'ant√≥nio justo soares', 'joaquim morgado', 'ernesto ferreira'];
  const foundNames = names.filter(name => query.includes(name));
  
  if (foundNames.length > 0) {
    return searchForSpecificPeople(content, foundNames);
  }
  
  // Busca espec√≠fica para primeira igreja
  if (query.includes('primeira igreja') || query.includes('primeira congrega√ß√£o')) {
    return searchForFirstChurch(content);
  }
  
  // Busca espec√≠fica para primeiros batismos
  if (query.includes('primeiros batismos') || query.includes('primeiro batismo')) {
    return searchForFirstBaptisms(content);
  }
  
  // Busca espec√≠fica para primeira escola
  if (query.includes('primeira escola') || query.includes('primeira escola adventista')) {
    return searchForFirstSchool(content);
  }
  
  // Busca geral por termos espec√≠ficos
  const relevantContent = searchBookContent(content, userMessage);
  if (relevantContent && relevantContent !== content.full_content) {
    return relevantContent;
  }
  
  // Se n√£o encontrou nada espec√≠fico, retornar o conte√∫do completo
  const maxLength = 300000;
  if (content.full_content.length > maxLength) {
    return content.full_content.substring(0, maxLength) + '\n\n... (conte√∫do continua)';
  }
  
  return content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar informa√ß√µes sobre mission√°rios
function searchForMissionaries(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  // Buscar se√ß√µes espec√≠ficas sobre mission√°rios
  const missionarySections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('mission√°rio') || 
           sectionText.includes('pioneiro') || 
           sectionText.includes('fundador') ||
           sectionText.includes('ant√≥nio gomes') ||
           sectionText.includes('alberto raposo') ||
           sectionText.includes('am√©rico rodrigues') ||
           sectionText.includes('ant√≥nio justo soares');
  });
  
  if (missionarySections.length > 0) {
    result += missionarySections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  // Buscar contexto espec√≠fico sobre cada mission√°rio
  const missionaries = [
    'ant√≥nio gomes', 'alberto raposo', 'am√©rico rodrigues', 'ant√≥nio justo soares',
    'joaquim morgado', 'ernesto ferreira', 'manuel andrade', 'nh√¥ mocho'
  ];
  
  missionaries.forEach(missionary => {
    if (fullText.includes(missionary)) {
      const index = content.full_content.toLowerCase().indexOf(missionary);
      const startIndex = Math.max(0, index - 1000);
      const endIndex = Math.min(content.full_content.length, index + 2000);
      const context = content.full_content.substring(startIndex, endIndex);
      result += `\n\n## Informa√ß√µes sobre ${missionary.toUpperCase()}\n\n${context}`;
    }
  });
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar pessoas espec√≠ficas
function searchForSpecificPeople(content: BookContent, names: string[]): string {
  let result = '';
  
  names.forEach(name => {
    const index = content.full_content.toLowerCase().indexOf(name);
    if (index !== -1) {
      const startIndex = Math.max(0, index - 1500);
      const endIndex = Math.min(content.full_content.length, index + 2500);
      const context = content.full_content.substring(startIndex, endIndex);
      result += `\n\n## Informa√ß√µes sobre ${name.toUpperCase()}\n\n${context}`;
    }
  });
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeira igreja
function searchForFirstChurch(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  // Buscar se√ß√µes sobre primeira igreja
  const churchSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('primeira igreja') || 
           sectionText.includes('primeira congrega√ß√£o') ||
           sectionText.includes('nossa senhora do monte') ||
           sectionText.includes('vila nova sintra');
  });
  
  if (churchSections.length > 0) {
    result += churchSections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  // Buscar contexto espec√≠fico
  const churchTerms = ['primeira igreja', 'primeira congrega√ß√£o', 'nossa senhora do monte', 'vila nova sintra'];
  churchTerms.forEach(term => {
    if (fullText.includes(term)) {
      const index = content.full_content.toLowerCase().indexOf(term);
      const startIndex = Math.max(0, index - 1000);
      const endIndex = Math.min(content.full_content.length, index + 2000);
      const context = content.full_content.substring(startIndex, endIndex);
      result += `\n\n## ${term.toUpperCase()}\n\n${context}`;
    }
  });
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeiros batismos
function searchForFirstBaptisms(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  const baptismTerms = ['primeiro batismo', 'primeiros batismos', 'batismo', 'batizados'];
  baptismTerms.forEach(term => {
    if (fullText.includes(term)) {
      const index = content.full_content.toLowerCase().indexOf(term);
      const startIndex = Math.max(0, index - 1000);
      const endIndex = Math.min(content.full_content.length, index + 2000);
      const context = content.full_content.substring(startIndex, endIndex);
      result += `\n\n## ${term.toUpperCase()}\n\n${context}`;
    }
  });
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeira escola
function searchForFirstSchool(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  const schoolTerms = ['primeira escola', 'primeira escola adventista', 'escola adventista'];
  schoolTerms.forEach(term => {
    if (fullText.includes(term)) {
      const index = content.full_content.toLowerCase().indexOf(term);
      const startIndex = Math.max(0, index - 1000);
      const endIndex = Math.min(content.full_content.length, index + 2000);
      const context = content.full_content.substring(startIndex, endIndex);
      result += `\n\n## ${term.toUpperCase()}\n\n${context}`;
    }
  });
  
  return result || content.full_content;
}
