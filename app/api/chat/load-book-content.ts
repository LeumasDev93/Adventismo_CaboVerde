/* eslint-disable @typescript-eslint/no-unused-vars */
import { createComponentClient } from "@/models/supabase";
import fs from 'fs';
import path from 'path';

// Cache global para o conte√∫do do livro
let bookContentCache: BookContent | null = null;

export interface BookContent {
  id: number;
  title: string;
  author: string;
  extracted_at: string;
  full_content: string;
  original_content: string;
  total_characters: number;
  total_words: number;
  sections: Array<{
    title: string;
    content: string;
    keywords: string[];
  }>;
}

// Fun√ß√£o para salvar o conte√∫do do livro no Supabase
export async function saveBookContentToSupabase(): Promise<boolean> {
  try {
    console.log('üíæ Salvando conte√∫do do livro no Supabase...');
    
    const livroPath = path.join(process.cwd(), 'data', 'livro-adventismo-cabo-verde.txt');
    
    if (!fs.existsSync(livroPath)) {
      console.error('‚ùå Arquivo do livro n√£o encontrado!');
      return false;
    }
    
    const content = fs.readFileSync(livroPath, 'utf-8');
    
    // Dividir em se√ß√µes baseado na estrutura completa do livro
    const sections: Array<{title: string, content: string, keywords: string[]}> = [];
    
    // 1. FICHA T√âCNICA
    const fichaTecnicaMatch = content.match(/Ficha T√©cnica[\s\S]*?(?=Dedicat√≥ria|Cap√≠tulo|$)/i);
    if (fichaTecnicaMatch) {
      sections.push({
        title: "üìã FICHA T√âCNICA",
        content: fichaTecnicaMatch[0].trim(),
        keywords: extractKeywords(fichaTecnicaMatch[0])
      });
    }
    
    // 2. DEDICAT√ìRIA
    const dedicatoriaMatch = content.match(/Dedicat√≥ria[\s\S]*?(?=Agradecimentos|Cap√≠tulo|$)/i);
    if (dedicatoriaMatch) {
      sections.push({
        title: "üíù DEDICAT√ìRIA",
        content: dedicatoriaMatch[0].trim(),
        keywords: extractKeywords(dedicatoriaMatch[0])
      });
    }
    
    // 3. AGRADECIMENTOS
    const agradecimentosMatch = content.match(/Agradecimentos[\s\S]*?(?=Pref√°cio|Cap√≠tulo|$)/i);
    if (agradecimentosMatch) {
      sections.push({
        title: "üôè AGRADECIMENTOS",
        content: agradecimentosMatch[0].trim(),
        keywords: extractKeywords(agradecimentosMatch[0])
      });
    }
    
    // 4. PREF√ÅCIO
    const prefacioMatch = content.match(/Pref√°cio[\s\S]*?(?=Nota|Cap√≠tulo|$)/i);
    if (prefacioMatch) {
      sections.push({
        title: "üìñ PREF√ÅCIO",
        content: prefacioMatch[0].trim(),
        keywords: extractKeywords(prefacioMatch[0])
      });
    }
    
    // 5. NOTA
    const notaMatch = content.match(/Nota[\s\S]*?(?=Resumo|Cap√≠tulo|$)/i);
    if (notaMatch) {
      sections.push({
        title: "üìù NOTA",
        content: notaMatch[0].trim(),
        keywords: extractKeywords(notaMatch[0])
      });
    }
    
    // 6. RESUMO
    const resumoMatch = content.match(/Resumo[\s\S]*?(?=Abstract|Cap√≠tulo|$)/i);
    if (resumoMatch) {
      sections.push({
        title: "üìã RESUMO",
        content: resumoMatch[0].trim(),
        keywords: extractKeywords(resumoMatch[0])
      });
    }
    
    // 7. ABSTRACT
    const abstractMatch = content.match(/Abstract[\s\S]*?(?=Cap√≠tulo|$)/i);
    if (abstractMatch) {
      sections.push({
        title: "üåç ABSTRACT",
        content: abstractMatch[0].trim(),
        keywords: extractKeywords(abstractMatch[0])
      });
    }
    
    // 8. CAP√çTULOS
    const chapterMatches = content.match(/CAP√çTULO\s+[IVX]+\s*[‚Äì-]\s*([^\n]+)/gi);
    if (chapterMatches) {
      chapterMatches.forEach((match, index) => {
        const title = match.trim();
        const startIndex = content.indexOf(match);
        const endIndex = index < chapterMatches.length - 1 
          ? content.indexOf(chapterMatches[index + 1]) 
          : content.length;
        
        const sectionContent = content.substring(startIndex, endIndex).trim();
        
        sections.push({
          title: title,
          content: sectionContent,
          keywords: extractKeywords(title + ' ' + sectionContent)
        });
      });
    }
    
    // 9. BIBLIOGRAFIA
    const bibliografiaMatch = content.match(/Bibliografia[\s\S]*?(?=Anexos|$)/i);
    if (bibliografiaMatch) {
      sections.push({
        title: "üìö BIBLIOGRAFIA",
        content: bibliografiaMatch[0].trim(),
        keywords: extractKeywords(bibliografiaMatch[0])
      });
    }
    
    // 10. ANEXOS
    const anexosMatch = content.match(/Anexos[\s\S]*?$/i);
    if (anexosMatch) {
      sections.push({
        title: "üìé ANEXOS",
        content: anexosMatch[0].trim(),
        keywords: extractKeywords(anexosMatch[0])
      });
    }
    
    // Se n√£o encontrou se√ß√µes estruturadas, dividir por par√°grafos
    if (sections.length === 0) {
      const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 100);
      paragraphs.forEach((paragraph, index) => {
        if (paragraph.trim()) {
          const lines = paragraph.trim().split('\n');
          const title = lines[0]?.trim().substring(0, 100) || `Par√°grafo ${index + 1}`;
          const content = paragraph.trim();
          
          sections.push({
            title: title,
            content: content,
            keywords: extractKeywords(title + ' ' + content)
          });
        }
      });
    }
    
    const bookData = {
      title: "O que dizer dos adventistas em Cabo Verde",
      author: "Karl Marx Morgan Lima Monteiro",
      extracted_at: new Date().toISOString(),
      full_content: content,
      original_content: content,
      total_characters: content.length,
      total_words: content.split(/\s+/).length,
      sections: sections
    };
    
    // Salvar no Supabase
    const supabase = createComponentClient();
    
    await supabase.from('book_content').delete().neq('id', 0);
    
    // Inserir novo conte√∫do
    console.log('üìù Inserindo novo conte√∫do...');
    const { data, error } = await supabase
      .from('book_content')
      .insert([bookData])
      .select();
    
    if (error) {
      console.error('‚ùå Erro ao salvar no Supabase:', error);
      return false;
    }
    
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar conte√∫do do livro:', error);
    return false;
  }
}

export async function loadBookContent(): Promise<BookContent | null> {
  // Retornar cache se dispon√≠vel
  if (bookContentCache) {
    return bookContentCache;
  }

  try {
    // Primeiro, tentar carregar do arquivo local
    const livroPath = path.join(process.cwd(), 'data', 'livro-adventismo-cabo-verde.txt');
    
    if (fs.existsSync(livroPath)) {
      console.log('‚úÖ Carregando conte√∫do do arquivo local...');
      const content = fs.readFileSync(livroPath, 'utf-8');
      
      // Dividir em se√ß√µes baseado na estrutura completa do livro
      const sections: Array<{title: string, content: string, keywords: string[]}> = [];
      
      // 1. FICHA T√âCNICA
      const fichaTecnicaMatch = content.match(/Ficha T√©cnica[\s\S]*?(?=Dedicat√≥ria|Cap√≠tulo|$)/i);
      if (fichaTecnicaMatch) {
        sections.push({
          title: "üìã FICHA T√âCNICA",
          content: fichaTecnicaMatch[0].trim(),
          keywords: extractKeywords(fichaTecnicaMatch[0])
        });
      }
      
      // 2. DEDICAT√ìRIA
      const dedicatoriaMatch = content.match(/Dedicat√≥ria[\s\S]*?(?=Agradecimentos|Cap√≠tulo|$)/i);
      if (dedicatoriaMatch) {
        sections.push({
          title: "üíù DEDICAT√ìRIA",
          content: dedicatoriaMatch[0].trim(),
          keywords: extractKeywords(dedicatoriaMatch[0])
        });
      }
      
      // 3. AGRADECIMENTOS
      const agradecimentosMatch = content.match(/Agradecimentos[\s\S]*?(?=Pref√°cio|Cap√≠tulo|$)/i);
      if (agradecimentosMatch) {
        sections.push({
          title: "üôè AGRADECIMENTOS",
          content: agradecimentosMatch[0].trim(),
          keywords: extractKeywords(agradecimentosMatch[0])
        });
      }
      
      // 4. PREF√ÅCIO
      const prefacioMatch = content.match(/Pref√°cio[\s\S]*?(?=Nota|Cap√≠tulo|$)/i);
      if (prefacioMatch) {
        sections.push({
          title: "üìñ PREF√ÅCIO",
          content: prefacioMatch[0].trim(),
          keywords: extractKeywords(prefacioMatch[0])
        });
      }
      
      // 5. NOTA
      const notaMatch = content.match(/Nota[\s\S]*?(?=Resumo|Cap√≠tulo|$)/i);
      if (notaMatch) {
        sections.push({
          title: "üìù NOTA",
          content: notaMatch[0].trim(),
          keywords: extractKeywords(notaMatch[0])
        });
      }
      
      // 6. RESUMO
      const resumoMatch = content.match(/Resumo[\s\S]*?(?=Abstract|Cap√≠tulo|$)/i);
      if (resumoMatch) {
        sections.push({
          title: "üìã RESUMO",
          content: resumoMatch[0].trim(),
          keywords: extractKeywords(resumoMatch[0])
        });
      }
      
      // 7. ABSTRACT
      const abstractMatch = content.match(/Abstract[\s\S]*?(?=Cap√≠tulo|$)/i);
      if (abstractMatch) {
        sections.push({
          title: "üåç ABSTRACT",
          content: abstractMatch[0].trim(),
          keywords: extractKeywords(abstractMatch[0])
        });
      }
      
      // 8. CAP√çTULOS
      const chapterMatches = content.match(/CAP√çTULO\s+[IVX]+\s*[‚Äì-]\s*([^\n]+)/gi);
      if (chapterMatches) {
        chapterMatches.forEach((match, index) => {
          const title = match.trim();
          const startIndex = content.indexOf(match);
          const endIndex = index < chapterMatches.length - 1 
            ? content.indexOf(chapterMatches[index + 1]) 
            : content.length;
          
          const sectionContent = content.substring(startIndex, endIndex).trim();
          
          sections.push({
            title: title,
            content: sectionContent,
            keywords: extractKeywords(title + ' ' + sectionContent)
          });
        });
      }
      
      // 9. BIBLIOGRAFIA
      const bibliografiaMatch = content.match(/Bibliografia[\s\S]*?(?=Anexos|$)/i);
      if (bibliografiaMatch) {
        sections.push({
          title: "üìö BIBLIOGRAFIA",
          content: bibliografiaMatch[0].trim(),
          keywords: extractKeywords(bibliografiaMatch[0])
        });
      }
      
      // 10. ANEXOS
      const anexosMatch = content.match(/Anexos[\s\S]*?$/i);
      if (anexosMatch) {
        sections.push({
          title: "üìé ANEXOS",
          content: anexosMatch[0].trim(),
          keywords: extractKeywords(anexosMatch[0])
        });
      }
      
      // Se n√£o encontrou se√ß√µes estruturadas, dividir por par√°grafos
      if (sections.length === 0) {
        const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 100);
        paragraphs.forEach((paragraph, index) => {
          if (paragraph.trim()) {
            const lines = paragraph.trim().split('\n');
            const title = lines[0]?.trim().substring(0, 100) || `Par√°grafo ${index + 1}`;
            const content = paragraph.trim();
            
            sections.push({
              title: title,
              content: content,
              keywords: extractKeywords(title + ' ' + content)
            });
          }
        });
      }
      
      const bookContent = {
        id: 1,
        title: "O que dizer dos adventistas em Cabo Verde",
        author: "Karl Marx Morgan Lima Monteiro",
        extracted_at: new Date().toISOString(),
        full_content: content,
        original_content: content,
        total_characters: content.length,
        total_words: content.split(/\s+/).length,
        sections: sections
      };
      
      // Cache o resultado
      bookContentCache = bookContent;
      return bookContent;
    }
    
    // Se n√£o encontrar o arquivo local, tentar do Supabase
    console.log('üìö Carregando conte√∫do do Supabase...');
    const supabase = createComponentClient();
    
    const { data, error } = await supabase
      .from('book_content')
      .select('*')
      .single();
    
    if (error) {
      console.error('Erro ao carregar conte√∫do do livro:', error);
      return null;
    }
    
    // Cache o resultado do Supabase
    bookContentCache = data;
    return data;
  } catch (error) {
    console.error('Erro ao carregar conte√∫do do livro:', error);
    return null;
  }
}

// Fun√ß√£o para extrair palavras-chave
function extractKeywords(text: string): string[] {
  const keywords = [
    'pioneiros', 'fundadores', 'mission√°rios', 'igreja', 'congrega√ß√£o',
    'pastores', 'l√≠deres', 'eventos', 'confer√™ncias', 'educa√ß√£o',
    'escolas', 'miss√£o', 'evangelismo', 'crescimento', 'desenvolvimento',
    'doutrinas', 'ensino', 'organiza√ß√£o', 'jovens', 'mulheres',
    'm√∫sica', 'publica√ß√µes', 'sa√∫de', 'comunidade', 'denomina√ß√µes',
    'datas', 'locais', 'nomes', 'hist√≥ria', 'adventismo', 'cabo verde',
    'praia', 'mindelo', 'santiago', 's√£o vicente', 'fogo', 'brava',
    'santo ant√£o', 's√£o nicolau', '1923', '1927', '1930', '1940',
    '1950', '1960', '1970', '1975', '1980', '1990', '2000', '2010', '2020',
    // Nomes reais mencionados no livro
    'ant√≥nio gomes', 'alberto raposo', 'joaquim morgado', 'ernesto ferreira',
    'manuel andrade', 'nh√¥ mocho', 'nazar√© raposo', 'milca raposo',
    'jo√£o dias', 'olavo dos santos', 'alexandrino rodrigues', 'domingos sanches',
    'jo√£o f√©lix monteiro', 'marcos da rosa', 'crisolito abreu', 'guilherme vieira lima',
    'artur villares', 'joaquim tango', 'karl marx monteiro', 'irlando pereira de pina',
    // Datas importantes
    '1892', '1933', '1934', '1935', '1936', '1941', '1946', '1951', '2009', '2010', '2012',
    // Locais espec√≠ficos
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ferreiros',
    'calif√≥rnia', 'hawai', 'estados unidos', 'brasil', 's√£o paulo', 's√£o tom√© e pr√≠ncipe',
    // Informa√ß√µes espec√≠ficas sobre a primeira igreja
    'primeira igreja', 'primeira congrega√ß√£o', 'primeiro templo', 'primeiro batismo',
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ilha brava',
    'ant√≥nio j gomes', 'pastor alberto raposo', 'primeiro pastor', '1935', '1936',
    'primeira miss√£o', 'primeira escola adventista', 'primeira associa√ß√£o'
  ];

  return keywords.filter(keyword => 
    text.toLowerCase().includes(keyword.toLowerCase())
  );
}

export function searchBookContent(content: BookContent, query: string): string {
  const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);
  const fullContent = content.full_content.toLowerCase();
  
  // Expandir termos de busca com sin√¥nimos e varia√ß√µes
  const expandedTerms = expandSearchTerms(searchTerms);
  
  // Buscar nas se√ß√µes primeiro (mais estruturado)
  const relevantSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return expandedTerms.some(term => sectionText.includes(term));
  });
  
  if (relevantSections.length > 0) {
    // Ordenar por relev√¢ncia (se√ß√µes com mais termos encontrados primeiro)
    const scoredSections = relevantSections.map(section => {
      const sectionText = (section.title + ' ' + section.content).toLowerCase();
      const score = expandedTerms.filter(term => sectionText.includes(term)).length;
      return { section, score };
    }).sort((a, b) => b.score - a.score);
    
    // Retornar as se√ß√µes mais relevantes (m√°ximo 5)
    const topSections = scoredSections.slice(0, 5);
    return topSections.map(({ section }) => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  // Buscar contexto espec√≠fico no conte√∫do completo
  const foundTerms = expandedTerms.filter(term => fullContent.includes(term));
  
  if (foundTerms.length > 0) {
    let relevantContent = '';
    const usedIndices = new Set<number>();
    
    // Buscar todas as ocorr√™ncias de cada termo
    foundTerms.forEach(term => {
      let searchIndex = 0;
      while (searchIndex < content.full_content.length) {
        const termIndex = content.full_content.toLowerCase().indexOf(term, searchIndex);
        if (termIndex === -1) break;
        
        // Evitar sobreposi√ß√£o de contextos
        if (!usedIndices.has(termIndex)) {
          const startIndex = Math.max(0, termIndex - 1500);
          const endIndex = Math.min(content.full_content.length, termIndex + 2000);
          const context = content.full_content.substring(startIndex, endIndex);
          
          // Verificar se o contexto √© relevante (cont√©m pelo menos 2 termos)
          const contextLower = context.toLowerCase();
          const termCount = expandedTerms.filter(t => contextLower.includes(t)).length;
          
          if (termCount >= 2) {
            relevantContent += context + '\n\n---\n\n';
            // Marcar √≠ndices usados para evitar duplica√ß√£o
            for (let i = startIndex; i < endIndex; i++) {
              usedIndices.add(i);
            }
          }
        }
        
        searchIndex = termIndex + 1;
      }
    });
    
    if (relevantContent) {
      return relevantContent;
    }
  }
  
  // Busca mais ampla por palavras-chave relacionadas
  const relatedContent = searchRelatedContent(content, query);
  if (relatedContent) {
    return relatedContent;
  }
  
  // Se n√£o encontrou nada espec√≠fico, retornar o conte√∫do completo
  return content.full_content;
}

// Fun√ß√£o para expandir termos de busca com sin√¥nimos e varia√ß√µes
function expandSearchTerms(terms: string[]): string[] {
  const expanded = new Set<string>();
  
  terms.forEach(term => {
    expanded.add(term);
    
    // Adicionar varia√ß√µes comuns
    if (term.includes('adventista')) {
      expanded.add('adventismo');
      expanded.add('iasd');
      expanded.add('s√©timo dia');
    }
    
    if (term.includes('igreja')) {
      expanded.add('congrega√ß√£o');
      expanded.add('templo');
      expanded.add('edif√≠cio');
    }
    
    if (term.includes('pastor')) {
      expanded.add('ministro');
      expanded.add('pregador');
      expanded.add('mission√°rio');
    }
    
    if (term.includes('escola')) {
      expanded.add('educa√ß√£o');
      expanded.add('ensino');
      expanded.add('alvar√°');
    }
    
    if (term.includes('batismo')) {
      expanded.add('batizados');
      expanded.add('batizar');
    }
    
    if (term.includes('brava')) {
      expanded.add('ilha brava');
      expanded.add('nossa senhora do monte');
    }
    
    if (term.includes('santiago')) {
      expanded.add('ilha de santiago');
      expanded.add('praia');
    }
    
    if (term.includes('s√£o vicente')) {
      expanded.add('s.vicente');
      expanded.add('mindelo');
    }
    
    if (term.includes('s√£o nicolau')) {
      expanded.add('s.nicolau');
    }
    
    if (term.includes('fogo')) {
      expanded.add('ilha do fogo');
      expanded.add('s√£o filipe');
    }
  });
  
  return Array.from(expanded);
}

// Fun√ß√£o para buscar conte√∫do relacionado
function searchRelatedContent(content: BookContent, query: string): string {
  const queryLower = query.toLowerCase();
  const fullContent = content.full_content.toLowerCase();
  
  // Palavras-chave relacionadas ao adventismo
  const adventismKeywords = [
    'adventista', 'adventismo', 'iasd', 's√©timo dia', 's√°bado', 'sabatismo',
    'ellen white', 'william miller', 'battle creek', 'mensagem', 'evangelho'
  ];
  
  // Palavras-chave relacionadas a Cabo Verde
  const caboVerdeKeywords = [
    'cabo verde', 'ilhas', 'arquip√©lago', 'brava', 'santiago', 's√£o vicente',
    's√£o nicolau', 'fogo', 'sal', 'santo ant√£o', 'maio', 'boavista'
  ];
  
  // Palavras-chave relacionadas a hist√≥ria
  const historyKeywords = [
    'hist√≥ria', 'hist√≥rico', 'pioneiro', 'fundador', 'primeiro', 'in√≠cio',
    'come√ßo', 'desenvolvimento', 'crescimento', 'evolu√ß√£o'
  ];
  
  // Verificar se a pergunta √© sobre adventismo em geral
  if (adventismKeywords.some(keyword => queryLower.includes(keyword))) {
    const relevantSections = content.sections.filter(section => {
      const sectionText = (section.title + ' ' + section.content).toLowerCase();
      return adventismKeywords.some(keyword => sectionText.includes(keyword));
    });
    
    if (relevantSections.length > 0) {
      return relevantSections.map(section => 
        `## ${section.title}\n\n${section.content}`
      ).join('\n\n');
    }
  }
  
  // Verificar se a pergunta √© sobre Cabo Verde
  if (caboVerdeKeywords.some(keyword => queryLower.includes(keyword))) {
    const relevantSections = content.sections.filter(section => {
      const sectionText = (section.title + ' ' + section.content).toLowerCase();
      return caboVerdeKeywords.some(keyword => sectionText.includes(keyword));
    });
    
    if (relevantSections.length > 0) {
      return relevantSections.map(section => 
        `## ${section.title}\n\n${section.content}`
      ).join('\n\n');
    }
  }
  
  // Verificar se a pergunta √© sobre hist√≥ria
  if (historyKeywords.some(keyword => queryLower.includes(keyword))) {
    const relevantSections = content.sections.filter(section => {
      const sectionText = (section.title + ' ' + section.content).toLowerCase();
      return historyKeywords.some(keyword => sectionText.includes(keyword));
    });
    
    if (relevantSections.length > 0) {
      return relevantSections.map(section => 
        `## ${section.title}\n\n${section.content}`
      ).join('\n\n');
    }
  }
  
  return '';
}

export function getRelevantContent(content: BookContent, userMessage: string): string {
  const query = userMessage.toLowerCase();
  
  // Busca espec√≠fica para primeiros mission√°rios e fundadores
  if (query.includes('primeiros') && (query.includes('mission√°rios') || query.includes('fundadores') || query.includes('pioneiros'))) {
    return searchForMissionaries(content);
  }
  
  // Busca espec√≠fica para nomes de pessoas
  const names = [
    'ant√≥nio gomes', 'alberto raposo', 'am√©rico rodrigues', 'ant√≥nio justo soares', 
    'joaquim morgado', 'ernesto ferreira', 'manuel andrade', 'nh√¥ mocho',
    'jo√£o esteves', 'greg√≥rio rosa', 'francisco cordas', 'jo√£o mendon√ßa',
    'isa√≠as da silva', 'benjamin schofield', 'an√≠bal fraga', 'marino da rosa',
    'daniel gomes', 'ricardo orsucci', 'fernando ramos duarte', 'louren√ßo jos√© gomes',
    'ven√¢ncio teixeira', 'armindo miranda', 'artur de oliveira', 'orlando costa',
    'adelino diogo', 'jaime de almeida', 'manuel miguel', 'filipe esperancinha',
    'anselmo gorgulho de almeida', 'manuel laranjeira', 'jo√£o f√©lix monteiro',
    'irlando pereira de pina', 'olavo dos santos', 'h√©ber mascarenhas',
    'gilberto ara√∫jo', 'osni fernandes', 'guilherme lima', 'ant√≥nio dos anjos'
  ];
  const foundNames = names.filter(name => query.includes(name));
  
  if (foundNames.length > 0) {
    return searchForSpecificPeople(content, foundNames);
  }
  
  // Busca espec√≠fica para primeira igreja
  if (query.includes('primeira igreja') || query.includes('primeira congrega√ß√£o')) {
    return searchForFirstChurch(content);
  }
  
  // Busca espec√≠fica para primeiros batismos
  if (query.includes('primeiros batismos') || query.includes('primeiro batismo')) {
    return searchForFirstBaptisms(content);
  }
  
  // Busca espec√≠fica para primeira escola
  if (query.includes('primeira escola') || query.includes('primeira escola adventista')) {
    return searchForFirstSchool(content);
  }
  
  // Busca espec√≠fica para expans√£o por ilhas
  if (query.includes('expans√£o') || query.includes('ilhas') || query.includes('arquip√©lago') || 
      query.includes('brava') || query.includes('santiago') || query.includes('s√£o vicente') ||
      query.includes('s√£o nicolau') || query.includes('fogo') || query.includes('sal') ||
      query.includes('santo ant√£o') || query.includes('maio') || query.includes('boavista')) {
    return searchForIslandExpansion(content);
  }
  
  // Busca geral por termos espec√≠ficos
  const relevantContent = searchBookContent(content, userMessage);
  if (relevantContent && relevantContent !== content.full_content) {
    return relevantContent;
  }
  
  // Busca abrangente para qualquer pergunta sobre o livro
  const comprehensiveContent = searchComprehensiveContent(content, userMessage);
  if (comprehensiveContent) {
    return comprehensiveContent;
  }
  
  // Se n√£o encontrou nada espec√≠fico, retornar o conte√∫do completo
  const maxLength = 300000;
  if (content.full_content.length > maxLength) {
    return content.full_content.substring(0, maxLength) + '\n\n... (conte√∫do continua)';
  }
  
  return content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar informa√ß√µes sobre mission√°rios
function searchForMissionaries(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  // PRIMEIROS PIONEIROS E FUNDADORES
  result += `# PRIMEIROS PIONEIROS E FUNDADORES DO ADVENTISMO EM CABO VERDE\n\n`;
  
  // Ant√≥nio Gomes - O primeiro pioneiro
  if (fullText.includes('ant√≥nio gomes')) {
    const index = content.full_content.toLowerCase().indexOf('ant√≥nio gomes');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `## ANT√ìNIO GOMES - O PRIMEIRO PIONEIRO\n\n${context}\n\n`;
  }
  
  // Alberto Raposo - Primeiro pastor enviado
  if (fullText.includes('alberto raposo')) {
    const index = content.full_content.toLowerCase().indexOf('alberto raposo');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `## ALBERTO RAPOSO - PRIMEIRO PASTOR ENVIADO\n\n${context}\n\n`;
  }
  
  // Am√©rico Rodrigues - Primeiro colportor
  if (fullText.includes('am√©rico rodrigues')) {
    const index = content.full_content.toLowerCase().indexOf('am√©rico rodrigues');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `## AM√âRICO RODRIGUES - PRIMEIRO COLPORTOR\n\n${context}\n\n`;
  }
  
  // Ant√≥nio Justo Soares - Pioneiro em S. Nicolau
  if (fullText.includes('ant√≥nio justo soares')) {
    const index = content.full_content.toLowerCase().indexOf('ant√≥nio justo soares');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `## ANT√ìNIO JUSTO SOARES - PIONEIRO EM S. NICOLAU\n\n${context}\n\n`;
  }
  
  // Manuel Andrade (Nh√¥ Mocho) - Dirigente provis√≥rio
  if (fullText.includes('manuel andrade') || fullText.includes('nh√¥ mocho')) {
    const index = content.full_content.toLowerCase().indexOf('manuel andrade');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `## MANUEL ANDRADE (NH√î MOCHO) - DIRIGENTE PROVIS√ìRIO\n\n${context}\n\n`;
  }
  
  // OUTROS PASTORES E MISSION√ÅRIOS IMPORTANTES
  result += `# OUTROS PASTORES E MISSION√ÅRIOS IMPORTANTES\n\n`;
  
  const otherMissionaries = [
    'jo√£o esteves', 'greg√≥rio rosa', 'francisco cordas', 'jo√£o mendon√ßa',
    'isa√≠as da silva', 'benjamin schofield', 'an√≠bal fraga', 'marino da rosa',
    'ven√¢ncio teixeira', 'joaquim morgado', 'ernesto ferreira'
  ];
  
  otherMissionaries.forEach(missionary => {
    if (fullText.includes(missionary)) {
      // Buscar m√∫ltiplas ocorr√™ncias para contexto completo
      const allOccurrences = [];
      let searchIndex = 0;
      
      while (searchIndex < content.full_content.length) {
        const foundIndex = content.full_content.toLowerCase().indexOf(missionary, searchIndex);
        if (foundIndex === -1) break;
        
        const startIndex = Math.max(0, foundIndex - 400);
        const endIndex = Math.min(content.full_content.length, foundIndex + 800);
        const context = content.full_content.substring(startIndex, endIndex);
        allOccurrences.push(context);
        
        searchIndex = foundIndex + 1;
      }
      
      // Combinar todas as ocorr√™ncias
      const combinedContext = allOccurrences.join('\n\n---\n\n');
      
      result += `## ${missionary.toUpperCase()}\n\n`;
      result += `### INFORMA√á√ïES DETALHADAS\n\n${combinedContext}\n\n`;
      
      // Adicionar informa√ß√µes espec√≠ficas sobre cada mission√°rio
      if (missionary.includes('jo√£o esteves')) {
        result += `### PAPEL HIST√ìRICO\n\nJo√£o Esteves substituiu Alberto Raposo em 1941 e teve um papel crucial no desenvolvimento da obra, especialmente na Ilha do Fogo onde fixou a sede da Miss√£o.\n\n`;
      } else if (missionary.includes('greg√≥rio rosa')) {
        result += `### PAPEL HIST√ìRICO\n\nGreg√≥rio Rosa foi um pastor cabo-verdiano natural da cidade da Praia, que teve um papel importante no desenvolvimento da obra em v√°rias ilhas, incluindo Brava, Fogo e Santiago.\n\n`;
      } else if (missionary.includes('francisco cordas')) {
        result += `### PAPEL HIST√ìRICO\n\nFrancisco Cordas foi Presidente da Miss√£o Adventista em Cabo Verde e teve um papel crucial na organiza√ß√£o e desenvolvimento da obra, especialmente na obten√ß√£o de alvar√°s para as escolas.\n\n`;
      } else if (missionary.includes('jo√£o mendon√ßa')) {
        result += `### PAPEL HIST√ìRICO\n\nJo√£o Mendon√ßa foi um pastor dedicado que atuou na Ilha Brava nos anos 50 e posteriormente, contribuindo significativamente para o crescimento da igreja e estabelecimento de escolas sabatinas.\n\n`;
      } else if (missionary.includes('isa√≠as da silva')) {
        result += `### PAPEL HIST√ìRICO\n\nIsa√≠as da Silva foi um colportor que atuou na Ilha Brava em 1960, contribuindo para a expans√£o da mensagem atrav√©s da literatura e venda de livros.\n\n`;
      } else if (missionary.includes('benjamin schofield')) {
        result += `### PAPEL HIST√ìRICO\n\nBenjamin Schofield foi um estagi√°rio que substituiu Isa√≠as da Silva, contribuindo para a continuidade do trabalho mission√°rio e realizando batismos.\n\n`;
      } else if (missionary.includes('an√≠bal fraga')) {
        result += `### PAPEL HIST√ìRICO\n\nAn√≠bal Fraga foi pastor na Ilha Brava entre 1968 e 1973, per√≠odo importante para o desenvolvimento da igreja e continuidade da obra educacional.\n\n`;
      } else if (missionary.includes('marino da rosa')) {
        result += `### PAPEL HIST√ìRICO\n\nMarino da Rosa foi um membro da Igreja do Nazareno que, ao estudar a B√≠blia, chegou √† conclus√£o de que o dia do Senhor √© o S√°bado e passou a guard√°-lo, formando um pequeno grupo de crentes.\n\n`;
      } else if (missionary.includes('ven√¢ncio teixeira')) {
        result += `### PAPEL HIST√ìRICO\n\nVen√¢ncio Teixeira foi um pastor cabo-verdiano que ajudou no desenvolvimento da IASD na Ilha do Sal e posteriormente tornou-se Presidente da Associa√ß√£o das Igrejas Adventistas do S√©timo Dia em Cabo Verde.\n\n`;
      } else if (missionary.includes('joaquim morgado')) {
        result += `### PAPEL HIST√ìRICO\n\nJoaquim Morgado foi um pastor e historiador que documentou a hist√≥ria do adventismo em Cabo Verde e teve um papel importante na preserva√ß√£o da mem√≥ria hist√≥rica da igreja.\n\n`;
      } else if (missionary.includes('ernesto ferreira')) {
        result += `### PAPEL HIST√ìRICO\n\nErnesto Ferreira foi Presidente da Uni√£o Portuguesa dos Adventistas do S√©timo Dia e teve um papel importante no desenvolvimento da obra em Cabo Verde, incluindo visitas pastorais e apoio √† obra mission√°ria.\n\n`;
      }
      
      result += `---\n\n`;
    }
  });
  
  // Buscar se√ß√µes espec√≠ficas sobre mission√°rios
  const missionarySections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('mission√°rio') || 
           sectionText.includes('pioneiro') || 
           sectionText.includes('fundador') ||
           sectionText.includes('brava') ||
           sectionText.includes('santiago') ||
           sectionText.includes('s√£o vicente') ||
           sectionText.includes('s√£o nicolau');
  });
  
  if (missionarySections.length > 0) {
    result += `# SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += missionarySections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar pessoas espec√≠ficas
function searchForSpecificPeople(content: BookContent, names: string[]): string {
  let result = '';
  
  result += `# INFORMA√á√ïES DETALHADAS SOBRE PIONEIROS E MISSION√ÅRIOS\n\n`;
  
  names.forEach(name => {
    const index = content.full_content.toLowerCase().indexOf(name);
    if (index !== -1) {
      // Buscar m√∫ltiplas ocorr√™ncias do nome para ter contexto completo
      const allOccurrences = [];
      let searchIndex = 0;
      
      while (searchIndex < content.full_content.length) {
        const foundIndex = content.full_content.toLowerCase().indexOf(name, searchIndex);
        if (foundIndex === -1) break;
        
        const startIndex = Math.max(0, foundIndex - 800);
        const endIndex = Math.min(content.full_content.length, foundIndex + 1200);
        const context = content.full_content.substring(startIndex, endIndex);
        allOccurrences.push(context);
        
        searchIndex = foundIndex + 1;
      }
      
      // Combinar todas as ocorr√™ncias
      const combinedContext = allOccurrences.join('\n\n---\n\n');
      
      result += `## ${name.toUpperCase()}\n\n`;
      result += `### INFORMA√á√ïES COMPLETAS\n\n${combinedContext}\n\n`;
      
      // Adicionar informa√ß√µes espec√≠ficas baseadas no nome
      if (name.includes('ant√≥nio gomes')) {
        result += `### PAPEL HIST√ìRICO\n\nAnt√≥nio Gomes foi o **primeiro pioneiro** do adventismo em Cabo Verde, emigrante da Ilha Brava que se converteu nos Estados Unidos e retornou em 1933 para lan√ßar as sementes do evangelho.\n\n`;
      } else if (name.includes('alberto raposo')) {
        result += `### PAPEL HIST√ìRICO\n\nAlberto Raposo foi o **primeiro pastor** enviado oficialmente a Cabo Verde, vindo de Portugal em 1935 para estabelecer a obra mission√°ria.\n\n`;
      } else if (name.includes('am√©rico rodrigues')) {
        result += `### PAPEL HIST√ìRICO\n\nAm√©rico Rodrigues foi o **primeiro colportor** enviado a Cabo Verde, estabelecendo-se na Ilha de Santiago para iniciar o trabalho mission√°rio.\n\n`;
      } else if (name.includes('ant√≥nio justo soares')) {
        result += `### PAPEL HIST√ìRICO\n\nAnt√≥nio Justo Soares foi um **pioneiro em S. Nicolau**, convertido em 1934 nos Estados Unidos e retornado √† sua terra natal para divulgar a mensagem.\n\n`;
      } else if (name.includes('manuel andrade') || name.includes('nh√¥ mocho')) {
        result += `### PAPEL HIST√ìRICO\n\nManuel Andrade (Nh√¥ Mocho) foi o **dirigente provis√≥rio** da congrega√ß√£o ap√≥s o retorno de Ant√≥nio Gomes aos Estados Unidos e antes da chegada do Pastor Raposo.\n\n`;
      } else if (name.includes('jo√£o esteves')) {
        result += `### PAPEL HIST√ìRICO\n\nJo√£o Esteves foi um **pastor importante** que substituiu Alberto Raposo em 1941 e teve um papel significativo no desenvolvimento da obra.\n\n`;
      } else if (name.includes('greg√≥rio rosa')) {
        result += `### PAPEL HIST√ìRICO\n\nGreg√≥rio Rosa foi um **pastor cabo-verdiano** natural da cidade da Praia, que teve um papel importante no desenvolvimento da obra em v√°rias ilhas.\n\n`;
      } else if (name.includes('francisco cordas')) {
        result += `### PAPEL HIST√ìRICO\n\nFrancisco Cordas foi **Presidente da Miss√£o Adventista** em Cabo Verde e teve um papel crucial na organiza√ß√£o e desenvolvimento da obra.\n\n`;
      } else if (name.includes('jo√£o mendon√ßa')) {
        result += `### PAPEL HIST√ìRICO\n\nJo√£o Mendon√ßa foi um **pastor dedicado** que atuou na Ilha Brava nos anos 50 e posteriormente, contribuindo significativamente para o crescimento da igreja.\n\n`;
      } else if (name.includes('isa√≠as da silva')) {
        result += `### PAPEL HIST√ìRICO\n\nIsa√≠as da Silva foi um **colportor** que atuou na Ilha Brava em 1960, contribuindo para a expans√£o da mensagem atrav√©s da literatura.\n\n`;
      } else if (name.includes('benjamin schofield')) {
        result += `### PAPEL HIST√ìRICO\n\nBenjamin Schofield foi um **estagi√°rio** que substituiu Isa√≠as da Silva, contribuindo para a continuidade do trabalho mission√°rio.\n\n`;
      } else if (name.includes('an√≠bal fraga')) {
        result += `### PAPEL HIST√ìRICO\n\nAn√≠bal Fraga foi **pastor na Ilha Brava** entre 1968 e 1973, per√≠odo importante para o desenvolvimento da igreja.\n\n`;
      } else if (name.includes('marino da rosa')) {
        result += `### PAPEL HIST√ìRICO\n\nMarino da Rosa foi um **membro da Igreja do Nazareno** que, ao estudar a B√≠blia, chegou √† conclus√£o de que o dia do Senhor √© o S√°bado e passou a guard√°-lo.\n\n`;
      } else if (name.includes('ven√¢ncio teixeira')) {
        result += `### PAPEL HIST√ìRICO\n\nVen√¢ncio Teixeira foi um **pastor cabo-verdiano** que ajudou no desenvolvimento da IASD na Ilha do Sal e posteriormente tornou-se Presidente da Associa√ß√£o.\n\n`;
      } else if (name.includes('joaquim morgado')) {
        result += `### PAPEL HIST√ìRICO\n\nJoaquim Morgado foi um **pastor e historiador** que documentou a hist√≥ria do adventismo em Cabo Verde e teve um papel importante na preserva√ß√£o da mem√≥ria hist√≥rica.\n\n`;
      } else if (name.includes('ernesto ferreira')) {
        result += `### PAPEL HIST√ìRICO\n\nErnesto Ferreira foi **Presidente da Uni√£o Portuguesa** dos Adventistas do S√©timo Dia e teve um papel importante no desenvolvimento da obra em Cabo Verde.\n\n`;
      }
      
      result += `---\n\n`;
    }
  });
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeira igreja
function searchForFirstChurch(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  result += `# A PRIMEIRA IGREJA ADVENTISTA EM CABO VERDE\n\n`;
  
  // Informa√ß√µes sobre a localiza√ß√£o e constru√ß√£o
  result += `## LOCALIZA√á√ÉO E CONSTRU√á√ÉO\n\n`;
  result += `A primeira igreja adventista em Cabo Verde foi constru√≠da na **Ilha Brava**, especificamente na zona de **Nossa Senhora do Monte**.\n\n`;
  
  // Buscar informa√ß√µes sobre Ant√≥nio Gomes e a constru√ß√£o
  if (fullText.includes('ant√≥nio gomes') && fullText.includes('edif√≠cio pr√≥prio')) {
    const index = content.full_content.toLowerCase().indexOf('edif√≠cio pr√≥prio');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### FINANCIAMENTO E CONSTRU√á√ÉO\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre os primeiros batismos
  result += `## PRIMEIROS BATISMOS E ORGANIZA√á√ÉO\n\n`;
  if (fullText.includes('primeiros batismos') && fullText.includes('1936')) {
    const index = content.full_content.toLowerCase().indexOf('primeiros batismos');
    const startIndex = Math.max(0, index - 300);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `${context}\n\n`;
  }
  
  // Informa√ß√µes sobre os primeiros batizados
  if (fullText.includes('ferreiros') && fullText.includes('tanque')) {
    const index = content.full_content.toLowerCase().indexOf('ferreiros');
    const startIndex = Math.max(0, index - 200);
    const endIndex = Math.min(content.full_content.length, index + 800);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### LOCAL DOS PRIMEIROS BATISMOS\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre a expans√£o
  result += `## EXPANS√ÉO E OUTROS LOCAIS\n\n`;
  if (fullText.includes('vila nova sintra') && fullText.includes('furna')) {
    const index = content.full_content.toLowerCase().indexOf('vila nova sintra');
    const startIndex = Math.max(0, index - 300);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `${context}\n\n`;
  }
  
  // Informa√ß√µes sobre a qualidade do edif√≠cio
  result += `## QUALIDADE E IMPORT√ÇNCIA DO EDIF√çCIO\n\n`;
  if (fullText.includes('melhor edif√≠cio da ilha')) {
    const index = content.full_content.toLowerCase().indexOf('melhor edif√≠cio da ilha');
    const startIndex = Math.max(0, index - 300);
    const endIndex = Math.min(content.full_content.length, index + 800);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `${context}\n\n`;
  }
  
  // Buscar se√ß√µes espec√≠ficas sobre a primeira igreja
  const churchSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('primeira igreja') || 
           sectionText.includes('primeira congrega√ß√£o') ||
           sectionText.includes('brava') ||
           sectionText.includes('nossa senhora do monte') ||
           sectionText.includes('ant√≥nio gomes') ||
           sectionText.includes('primeiros batismos');
  });
  
  if (churchSections.length > 0) {
    result += `# SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += churchSections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeiros batismos
function searchForFirstBaptisms(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  result += `# OS PRIMEIROS BATISMOS ADVENTISTAS EM CABO VERDE\n\n`;
  
  // Informa√ß√µes sobre a data dos primeiros batismos
  result += `## DATA E LOCAL DOS PRIMEIROS BATISMOS\n\n`;
  result += `Os primeiros batismos adventistas em Cabo Verde foram realizados em **mar√ßo de 1936**.\n\n`;
  
  // Buscar informa√ß√µes espec√≠ficas sobre os primeiros batizados
  if (fullText.includes('ferreiros') && fullText.includes('tanque')) {
    const index = content.full_content.toLowerCase().indexOf('ferreiros');
    const startIndex = Math.max(0, index - 200);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### LOCAL DOS BATISMOS\n\n${context}\n\n`;
  }
  
  // Buscar informa√ß√µes sobre os nomes dos primeiros batizados
  if (fullText.includes('andr√© de burgo') || fullText.includes('alfredo monteiro')) {
    const index = content.full_content.toLowerCase().indexOf('andr√© de burgo');
    const startIndex = Math.max(0, index - 100);
    const endIndex = Math.min(content.full_content.length, index + 800);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### PRIMEIROS BATIZADOS\n\n${context}\n\n`;
  }
  
  // Buscar informa√ß√µes sobre a organiza√ß√£o da igreja
  if (fullText.includes('organizar uma igreja')) {
    const index = content.full_content.toLowerCase().indexOf('organizar uma igreja');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### ORGANIZA√á√ÉO DA IGREJA\n\n${context}\n\n`;
  }
  
  // Buscar se√ß√µes relevantes
  const baptismSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('batismo') || 
           sectionText.includes('batizados') ||
           sectionText.includes('1936') ||
           sectionText.includes('ferreiros') ||
           sectionText.includes('organizar');
  });
  
  if (baptismSections.length > 0) {
    result += `# SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += baptismSections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar primeira escola
function searchForFirstSchool(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  result += `# A PRIMEIRA ESCOLA ADVENTISTA EM CABO VERDE\n\n`;
  
  // Informa√ß√µes sobre a primeira escola
  result += `## PRIMEIRA ESCOLA ADVENTISTA - ILHA BRAVA\n\n`;
  result += `A primeira escola adventista em Cabo Verde foi estabelecida na **Ilha Brava** e come√ßou a funcionar em **1944**.\n\n`;
  
  // Buscar informa√ß√µes sobre o funcionamento da escola
  if (fullText.includes('1944') && fullText.includes('escola adventista')) {
    const index = content.full_content.toLowerCase().indexOf('1944');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### IN√çCIO DO FUNCIONAMENTO\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre o alvar√°
  result += `## ALVAR√Å E AUTORIZA√á√ÉO\n\n`;
  result += `A escola come√ßou a funcionar em 1944, mas o **alvar√° foi conseguido posteriormente** pelo Pastor Francisco Cordas, que conseguiu os alvar√°s para as escolas que se abriram em algumas ilhas.\n\n`;
  
  // Buscar informa√ß√µes sobre Francisco Cordas e os alvar√°s
  if (fullText.includes('francisco cordas') && fullText.includes('alvar√°')) {
    const index = content.full_content.toLowerCase().indexOf('alvar√°');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### PROCESSO DE AUTORIZA√á√ÉO\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre a import√¢ncia da educa√ß√£o
  result += `## IMPORT√ÇNCIA DA EDUCA√á√ÉO ADVENTISTA\n\n`;
  result += `A educa√ß√£o adventista em Cabo Verde acompanhou de perto a penetra√ß√£o da mensagem do Advento nas ilhas. O Pastor Francisco Cordas defendia que a **principal atividade da Miss√£o de Cabo Verde**, aliada √† prega√ß√£o do Evangelho, era o ramo da Educa√ß√£o.\n\n`;
  
  // Buscar informa√ß√µes sobre a filosofia educacional
  if (fullText.includes('educa√ß√£o') && fullText.includes('prega√ß√£o')) {
    const index = content.full_content.toLowerCase().indexOf('educa√ß√£o');
    const startIndex = Math.max(0, index - 300);
    const endIndex = Math.min(content.full_content.length, index + 800);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### FILOSOFIA EDUCACIONAL\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre outras escolas
  result += `## EXPANS√ÉO DAS ESCOLAS ADVENTISTAS\n\n`;
  result += `Ap√≥s a primeira escola na Brava (1944), outras escolas adventistas foram estabelecidas:\n\n`;
  result += `- **Praia**: Escola a funcionar desde o ano letivo 1950/51, alvar√° conseguido em 1954\n`;
  result += `- **S√£o Vicente**: Alvar√° conseguido em 1954\n`;
  result += `- **Fogo**: Escola estabelecida com alvar√° conseguido\n\n`;
  
  // Buscar informa√ß√µes sobre as outras escolas
  if (fullText.includes('praia') && fullText.includes('1950')) {
    const index = content.full_content.toLowerCase().indexOf('1950');
    const startIndex = Math.max(0, index - 300);
    const endIndex = Math.min(content.full_content.length, index + 800);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### ESCOLAS EM OUTRAS ILHAS\n\n${context}\n\n`;
  }
  
  // Informa√ß√µes sobre a continuidade
  result += `## CONTINUIDADE E DESENVOLVIMENTO\n\n`;
  result += `A escola adventista da Brava continuou a funcionar ao longo dos anos, mesmo durante per√≠odos dif√≠ceis como a fome que assolou a ilha. Nos anos 70, a escola ainda funcionava, demonstrando a import√¢ncia e o sucesso da obra educacional adventista.\n\n`;
  
  // Buscar se√ß√µes relevantes
  const schoolSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('escola') || 
           sectionText.includes('educa√ß√£o') ||
           sectionText.includes('1944') ||
           sectionText.includes('alvar√°') ||
           sectionText.includes('francisco cordas');
  });
  
  if (schoolSections.length > 0) {
    result += `# SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += schoolSections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  return result || content.full_content;
}

// Fun√ß√£o espec√≠fica para buscar informa√ß√µes sobre expans√£o por ilhas
function searchForIslandExpansion(content: BookContent): string {
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  result += `# EXPANS√ÉO DO ADVENTISMO EM CABO VERDE - ILHA POR ILHA\n\n`;
  
  // ILHA BRAVA - BER√áO DO ADVENTISMO
  result += `## ILHA BRAVA - O BER√áO DO ADVENTISMO\n\n`;
  result += `A Ilha Brava foi o **ber√ßo do adventismo em Cabo Verde**. Foi aqui que Ant√≥nio Gomes, emigrante natural da Ilha Brava, retornou em 1933 trazendo as sementes do adventismo dos Estados Unidos.\n\n`;
  
  if (fullText.includes('brava') && fullText.includes('ant√≥nio gomes')) {
    const index = content.full_content.toLowerCase().indexOf('brava');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO NA BRAVA\n\n${context}\n\n`;
  }
  
  // ILHA DO FOGO
  result += `## ILHA DO FOGO\n\n`;
  result += `O adventismo chegou √† Ilha do Fogo ainda no tempo do pastor Alberto Raposo. O trabalho come√ßou de forma met√≥dica em 1944, quando o irm√£o Jo√£o Esteves se estabeleceu em S√£o Filipe.\n\n`;
  
  if (fullText.includes('fogo') && fullText.includes('jo√£o esteves')) {
    const index = content.full_content.toLowerCase().indexOf('fogo');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO NO FOGO\n\n${context}\n\n`;
  }
  
  // ILHA DE SANTIAGO
  result += `## ILHA DE SANTIAGO\n\n`;
  result += `A Ilha de Santiago foi a terceira a ter uma igreja organizada. Em 1935 chegou o primeiro obreiro, o irm√£o Am√©rico Rodrigues, que se estabeleceu na cidade da Praia.\n\n`;
  
  if (fullText.includes('santiago') && fullText.includes('am√©rico rodrigues')) {
    const index = content.full_content.toLowerCase().indexOf('santiago');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM SANTIAGO\n\n${context}\n\n`;
  }
  
  // ILHA DE S√ÉO VICENTE
  result += `## ILHA DE S√ÉO VICENTE\n\n`;
  result += `A Ilha de S√£o Vicente teve um desenvolvimento importante do adventismo, especialmente com a transfer√™ncia da sede da Miss√£o para o Mindelo em 1952.\n\n`;
  
  if (fullText.includes('s√£o vicente') || fullText.includes('s.vicente')) {
    const index = content.full_content.toLowerCase().indexOf('s√£o vicente');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM S√ÉO VICENTE\n\n${context}\n\n`;
  }
  
  // ILHA DE S√ÉO NICOLAU
  result += `## ILHA DE S√ÉO NICOLAU\n\n`;
  result += `A Ilha de S√£o Nicolau teve como pioneiro Ant√≥nio Justo Soares, que se converteu ao adventismo em 1934 nos Estados Unidos e retornou √† sua terra natal para divulgar a mensagem.\n\n`;
  
  if (fullText.includes('s√£o nicolau') || fullText.includes('s.nicolau')) {
    const index = content.full_content.toLowerCase().indexOf('s√£o nicolau');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM S√ÉO NICOLAU\n\n${context}\n\n`;
  }
  
  // ILHA DO SAL
  result += `## ILHA DO SAL\n\n`;
  result += `A Ilha do Sal teve um desenvolvimento mais tardio do adventismo. At√© finais dos anos 80, n√£o havia Igreja organizada na Ilha do Sal.\n\n`;
  
  if (fullText.includes('sal') && fullText.includes('ven√¢ncio teixeira')) {
    const index = content.full_content.toLowerCase().indexOf('sal');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO NO SAL\n\n${context}\n\n`;
  }
  
  // ILHA DE SANTO ANT√ÉO
  result += `## ILHA DE SANTO ANT√ÉO\n\n`;
  result += `A Ilha de Santo Ant√£o teve os primeiros batismos realizados pelo pastor italiano Ricardo Orsucci, que foi enviado para as ilhas em 1974.\n\n`;
  
  if (fullText.includes('santo ant√£o') && fullText.includes('ricardo orsucci')) {
    const index = content.full_content.toLowerCase().indexOf('santo ant√£o');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 2000);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM SANTO ANT√ÉO\n\n${context}\n\n`;
  }
  
  // ILHA DE MAIO
  result += `## ILHA DE MAIO\n\n`;
  result += `A Ilha de Maio teve um desenvolvimento mais recente do adventismo, com a forma√ß√£o de grupos de crentes ao longo do tempo.\n\n`;
  
  if (fullText.includes('maio')) {
    const index = content.full_content.toLowerCase().indexOf('maio');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM MAIO\n\n${context}\n\n`;
  }
  
  // ILHA DE BOA VISTA
  result += `## ILHA DE BOA VISTA\n\n`;
  result += `A Ilha de Boa Vista teve um desenvolvimento mais tardio do adventismo, com a forma√ß√£o de grupos de crentes em per√≠odos mais recentes.\n\n`;
  
  if (fullText.includes('boa vista') || fullText.includes('boavista')) {
    const index = content.full_content.toLowerCase().indexOf('boa vista');
    const startIndex = Math.max(0, index - 500);
    const endIndex = Math.min(content.full_content.length, index + 1500);
    const context = content.full_content.substring(startIndex, endIndex);
    result += `### DESENVOLVIMENTO EM BOA VISTA\n\n${context}\n\n`;
  }
  
  // RESUMO DA EXPANS√ÉO
  result += `# RESUMO DA EXPANS√ÉO\n\n`;
  result += `A expans√£o do adventismo em Cabo Verde seguiu uma progress√£o natural:\n\n`;
  result += `1. **1933 - Ilha Brava**: Ant√≥nio Gomes retorna e inicia a obra\n`;
  result += `2. **1935 - Ilha de Santiago**: Am√©rico Rodrigues estabelece-se na Praia\n`;
  result += `3. **1941-1944 - Ilha do Fogo**: Jo√£o Esteves desenvolve a obra\n`;
  result += `4. **1952 - Ilha de S√£o Vicente**: Transfer√™ncia da sede da Miss√£o\n`;
  result += `5. **D√©cadas seguintes**: Expans√£o para as demais ilhas\n\n`;
  
  result += `O livro confirma que a mensagem adventista est√° presente em **todas as nove ilhas habitadas** do arquip√©lago, demonstrando o sucesso da expans√£o iniciada na Brava.\n\n`;
  
  // Buscar se√ß√µes relevantes sobre expans√£o
  const expansionSections = content.sections.filter(section => {
    const sectionText = (section.title + ' ' + section.content).toLowerCase();
    return sectionText.includes('expans√£o') || 
           sectionText.includes('ilhas') ||
           sectionText.includes('arquip√©lago') ||
           sectionText.includes('brava') ||
           sectionText.includes('santiago') ||
           sectionText.includes('s√£o vicente') ||
           sectionText.includes('s√£o nicolau') ||
           sectionText.includes('fogo') ||
           sectionText.includes('sal') ||
           sectionText.includes('santo ant√£o') ||
           sectionText.includes('maio') ||
           sectionText.includes('boa vista');
  });
  
  if (expansionSections.length > 0) {
    result += `# SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += expansionSections.map(section => 
      `## ${section.title}\n\n${section.content}`
    ).join('\n\n');
  }
  
  return result || content.full_content;
}

// Fun√ß√£o abrangente para buscar qualquer conte√∫do sobre o livro
function searchComprehensiveContent(content: BookContent, query: string): string {
  const queryLower = query.toLowerCase();
  const fullText = content.full_content.toLowerCase();
  let result = '';
  
  // Analisar o tipo de pergunta
  const questionType = analyzeQuestionType(query);
  
  result += `# INFORMA√á√ïES SOBRE O LIVRO "O QUE DIZER DOS ADVENTISTAS EM CABO VERDE"\n\n`;
  result += `Baseado na pergunta sobre "${query}", aqui est√£o as informa√ß√µes relevantes encontradas no livro:\n\n`;
  
  // Buscar por palavras-chave principais
  const mainKeywords = extractMainKeywords(query);
  const foundKeywords = mainKeywords.filter(keyword => fullText.includes(keyword));
  
  if (foundKeywords.length > 0) {
    result += `## INFORMA√á√ïES ENCONTRADAS\n\n`;
    
    foundKeywords.forEach(keyword => {
      // Buscar todas as ocorr√™ncias da palavra-chave
      let searchIndex = 0;
      const keywordContexts = [];
      
      while (searchIndex < content.full_content.length) {
        const keywordIndex = content.full_content.toLowerCase().indexOf(keyword, searchIndex);
        if (keywordIndex === -1) break;
        
        const startIndex = Math.max(0, keywordIndex - 1000);
        const endIndex = Math.min(content.full_content.length, keywordIndex + 1500);
        const context = content.full_content.substring(startIndex, endIndex);
        
        // Verificar se o contexto √© relevante
        if (context.length > 200) {
          keywordContexts.push(context);
        }
        
        searchIndex = keywordIndex + 1;
      }
      
      if (keywordContexts.length > 0) {
        result += `### ${keyword.toUpperCase()}\n\n`;
        // Pegar os 3 contextos mais relevantes
        const topContexts = keywordContexts.slice(0, 3);
        result += topContexts.join('\n\n---\n\n') + '\n\n';
      }
    });
  }
  
  // Buscar se√ß√µes relevantes baseadas no tipo de pergunta
  const relevantSections = findRelevantSections(content, questionType);
  if (relevantSections.length > 0) {
    result += `## SE√á√ïES RELEVANTES DO LIVRO\n\n`;
    result += relevantSections.map(section => 
      `### ${section.title}\n\n${section.content}`
    ).join('\n\n---\n\n');
  }
  
  // Adicionar contexto hist√≥rico geral se a pergunta for sobre hist√≥ria
  if (questionType.includes('hist√≥ria') || questionType.includes('hist√≥rico')) {
    result += `\n\n## CONTEXTO HIST√ìRICO GERAL\n\n`;
    result += `O livro "O que dizer dos adventistas em Cabo Verde" de Karl Marx Morgan Lima Monteiro documenta a hist√≥ria completa do adventismo no arquip√©lago, desde os primeiros mission√°rios at√© o desenvolvimento atual da igreja em todas as ilhas.\n\n`;
  }
  
  // Adicionar informa√ß√µes sobre o autor e o livro
  result += `\n\n## SOBRE O LIVRO\n\n`;
  result += `**T√≠tulo**: O que dizer dos adventistas em Cabo Verde\n`;
  result += `**Autor**: Karl Marx Morgan Lima Monteiro\n`;
  result += `**Edi√ß√£o**: 1¬™ Edi√ß√£o, Dezembro 2012, 500 exemplares\n`;
  result += `**Conte√∫do**: Este livro √© uma obra acad√™mica que documenta de forma detalhada a hist√≥ria, desenvolvimento e caracter√≠sticas atuais da Igreja Adventista do S√©timo Dia em Cabo Verde.\n\n`;
  
  return result;
}

// Fun√ß√£o para analisar o tipo de pergunta
function analyzeQuestionType(query: string): string[] {
  const queryLower = query.toLowerCase();
  const types = [];
  
  if (queryLower.includes('quem') || queryLower.includes('pioneiro') || queryLower.includes('mission√°rio') || queryLower.includes('pastor')) {
    types.push('pessoas');
  }
  
  if (queryLower.includes('quando') || queryLower.includes('data') || queryLower.includes('ano') || queryLower.includes('√©poca')) {
    types.push('cronologia');
  }
  
  if (queryLower.includes('onde') || queryLower.includes('local') || queryLower.includes('ilha') || queryLower.includes('lugar')) {
    types.push('geografia');
  }
  
  if (queryLower.includes('como') || queryLower.includes('processo') || queryLower.includes('desenvolvimento') || queryLower.includes('evolu√ß√£o')) {
    types.push('processo');
  }
  
  if (queryLower.includes('por que') || queryLower.includes('motivo') || queryLower.includes('raz√£o') || queryLower.includes('causa')) {
    types.push('causas');
  }
  
  if (queryLower.includes('hist√≥ria') || queryLower.includes('hist√≥rico') || queryLower.includes('passado') || queryLower.includes('origem')) {
    types.push('hist√≥ria');
  }
  
  if (queryLower.includes('igreja') || queryLower.includes('templo') || queryLower.includes('edif√≠cio') || queryLower.includes('constru√ß√£o')) {
    types.push('institui√ß√µes');
  }
  
  if (queryLower.includes('escola') || queryLower.includes('educa√ß√£o') || queryLower.includes('ensino') || queryLower.includes('alvar√°')) {
    types.push('educa√ß√£o');
  }
  
  if (queryLower.includes('batismo') || queryLower.includes('batizado') || queryLower.includes('convers√£o') || queryLower.includes('membro')) {
    types.push('religi√£o');
  }
  
  return types;
}

// Fun√ß√£o para extrair palavras-chave principais
function extractMainKeywords(query: string): string[] {
  const queryLower = query.toLowerCase();
  const keywords: string[] = [];
  
  // Palavras-chave relacionadas ao adventismo
  const adventismTerms = ['adventista', 'adventismo', 'iasd', 's√©timo dia', 's√°bado', 'sabatismo', 'mensagem', 'evangelho'];
  adventismTerms.forEach(term => {
    if (queryLower.includes(term)) keywords.push(term);
  });
  
  // Palavras-chave relacionadas a Cabo Verde
  const caboVerdeTerms = ['cabo verde', 'ilhas', 'arquip√©lago', 'brava', 'santiago', 's√£o vicente', 's√£o nicolau', 'fogo', 'sal', 'santo ant√£o', 'maio', 'boa vista'];
  caboVerdeTerms.forEach(term => {
    if (queryLower.includes(term)) keywords.push(term);
  });
  
  // Palavras-chave relacionadas a pessoas
  const peopleTerms = ['ant√≥nio gomes', 'alberto raposo', 'am√©rico rodrigues', 'ant√≥nio justo soares', 'jo√£o esteves', 'greg√≥rio rosa', 'francisco cordas', 'jo√£o mendon√ßa'];
  peopleTerms.forEach(term => {
    if (queryLower.includes(term)) keywords.push(term);
  });
  
  // Palavras-chave relacionadas a institui√ß√µes
  const institutionTerms = ['igreja', 'templo', 'escola', 'educa√ß√£o', 'miss√£o', 'associa√ß√£o', 'congrega√ß√£o'];
  institutionTerms.forEach(term => {
    if (queryLower.includes(term)) keywords.push(term);
  });
  
  // Palavras-chave relacionadas a eventos
  const eventTerms = ['batismo', 'batizados', 'primeira igreja', 'primeira escola', 'primeiros mission√°rios', 'expans√£o', 'desenvolvimento'];
  eventTerms.forEach(term => {
    if (queryLower.includes(term)) keywords.push(term);
  });
  
  return keywords;
}

// Fun√ß√£o para encontrar se√ß√µes relevantes baseadas no tipo de pergunta
function findRelevantSections(content: BookContent, questionTypes: string[]): Array<{title: string, content: string}> {
  const relevantSections: Array<{title: string, content: string}> = [];
  
  questionTypes.forEach(type => {
    switch (type) {
      case 'pessoas':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('pioneiro') || sectionText.includes('mission√°rio') || sectionText.includes('pastor') || sectionText.includes('ant√≥nio gomes');
        }));
        break;
        
      case 'cronologia':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('1933') || sectionText.includes('1935') || sectionText.includes('1944') || sectionText.includes('1952');
        }));
        break;
        
      case 'geografia':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('ilha') || sectionText.includes('brava') || sectionText.includes('santiago') || sectionText.includes('s√£o vicente');
        }));
        break;
        
      case 'institui√ß√µes':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('igreja') || sectionText.includes('templo') || sectionText.includes('escola') || sectionText.includes('miss√£o');
        }));
        break;
        
      case 'educa√ß√£o':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('escola') || sectionText.includes('educa√ß√£o') || sectionText.includes('alvar√°') || sectionText.includes('ensino');
        }));
        break;
        
      case 'religi√£o':
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('batismo') || sectionText.includes('batizados') || sectionText.includes('convers√£o') || sectionText.includes('membro');
        }));
        break;
        
      default:
        // Para qualquer tipo, buscar se√ß√µes que contenham termos gerais
        relevantSections.push(...content.sections.filter(section => {
          const sectionText = (section.title + ' ' + section.content).toLowerCase();
          return sectionText.includes('adventista') || sectionText.includes('cabo verde') || sectionText.includes('hist√≥ria');
        }));
    }
  });
  
  // Remover duplicatas
  const uniqueSections = relevantSections.filter((section, index, self) => 
    index === self.findIndex(s => s.title === section.title)
  );
  
  return uniqueSections.slice(0, 5); // M√°ximo 5 se√ß√µes
}
