import { NextResponse } from 'next/server';
import { createApiClient } from '@/models/supabase';
import fs from 'fs';
import path from 'path';

export async function GET() {
  try {
    console.log('=== INICIANDO EXTRA√á√ÉO DO CONTE√öDO REAL ===');
    
    // Ler o conte√∫do real do livro do arquivo
    const livroPath = path.join(process.cwd(), 'data', 'livro-adventismo-cabo-verde.txt');
    
    if (!fs.existsSync(livroPath)) {
      console.log('‚ùå Arquivo do livro n√£o encontrado!');
      throw new Error('Arquivo do livro n√£o encontrado. Verifique se o arquivo data/livro-adventismo-cabo-verde.txt existe.');
    }
    
    console.log('‚úÖ Arquivo do livro encontrado!');
    const realContent = fs.readFileSync(livroPath, 'utf-8');
    
    console.log(`‚úÖ Conte√∫do REAL extra√≠do com sucesso!`);
    console.log(`- Tamanho do texto: ${realContent.length} caracteres`);
    
    // Dividir em se√ß√µes baseado na estrutura completa do livro
    const sections: Array<{title: string, content: string, keywords: string[]}> = [];
    
    // 1. FICHA T√âCNICA
    const fichaTecnicaMatch = realContent.match(/Ficha T√©cnica[\s\S]*?(?=Dedicat√≥ria|Cap√≠tulo|$)/i);
    if (fichaTecnicaMatch) {
      sections.push({
        title: "üìã FICHA T√âCNICA",
        content: fichaTecnicaMatch[0].trim(),
        keywords: extractKeywords(fichaTecnicaMatch[0])
      });
    }
    
    // 2. DEDICAT√ìRIA
    const dedicatoriaMatch = realContent.match(/Dedicat√≥ria[\s\S]*?(?=Agradecimentos|Cap√≠tulo|$)/i);
    if (dedicatoriaMatch) {
      sections.push({
        title: "üíù DEDICAT√ìRIA",
        content: dedicatoriaMatch[0].trim(),
        keywords: extractKeywords(dedicatoriaMatch[0])
      });
    }
    
    // 3. AGRADECIMENTOS
    const agradecimentosMatch = realContent.match(/Agradecimentos[\s\S]*?(?=Pref√°cio|Cap√≠tulo|$)/i);
    if (agradecimentosMatch) {
      sections.push({
        title: "üôè AGRADECIMENTOS",
        content: agradecimentosMatch[0].trim(),
        keywords: extractKeywords(agradecimentosMatch[0])
      });
    }
    
    // 4. PREF√ÅCIO
    const prefacioMatch = realContent.match(/Pref√°cio[\s\S]*?(?=Nota|Cap√≠tulo|$)/i);
    if (prefacioMatch) {
      sections.push({
        title: "üìñ PREF√ÅCIO",
        content: prefacioMatch[0].trim(),
        keywords: extractKeywords(prefacioMatch[0])
      });
    }
    
    // 5. NOTA
    const notaMatch = realContent.match(/Nota[\s\S]*?(?=Resumo|Cap√≠tulo|$)/i);
    if (notaMatch) {
      sections.push({
        title: "üìù NOTA",
        content: notaMatch[0].trim(),
        keywords: extractKeywords(notaMatch[0])
      });
    }
    
    // 6. RESUMO
    const resumoMatch = realContent.match(/Resumo[\s\S]*?(?=Abstract|Cap√≠tulo|$)/i);
    if (resumoMatch) {
      sections.push({
        title: "üìã RESUMO",
        content: resumoMatch[0].trim(),
        keywords: extractKeywords(resumoMatch[0])
      });
    }
    
    // 7. ABSTRACT
    const abstractMatch = realContent.match(/Abstract[\s\S]*?(?=Cap√≠tulo|$)/i);
    if (abstractMatch) {
      sections.push({
        title: "üåç ABSTRACT",
        content: abstractMatch[0].trim(),
        keywords: extractKeywords(abstractMatch[0])
      });
    }
    
    // 8. CAP√çTULOS
    const chapterMatches = realContent.match(/CAP√çTULO\s+[IVX]+\s*[‚Äì-]\s*([^\n]+)/gi);
    if (chapterMatches) {
      chapterMatches.forEach((match, index) => {
        const title = match.trim();
        const startIndex = realContent.indexOf(match);
        const endIndex = index < chapterMatches.length - 1 
          ? realContent.indexOf(chapterMatches[index + 1]) 
          : realContent.length;
        
        const sectionContent = realContent.substring(startIndex, endIndex).trim();
        
        sections.push({
          title: title,
          content: sectionContent,
          keywords: extractKeywords(title + ' ' + sectionContent)
        });
      });
    }
    
    // 9. BIBLIOGRAFIA
    const bibliografiaMatch = realContent.match(/Bibliografia[\s\S]*?(?=Anexos|$)/i);
    if (bibliografiaMatch) {
      sections.push({
        title: "üìö BIBLIOGRAFIA",
        content: bibliografiaMatch[0].trim(),
        keywords: extractKeywords(bibliografiaMatch[0])
      });
    }
    
    // 10. ANEXOS
    const anexosMatch = realContent.match(/Anexos[\s\S]*?$/i);
    if (anexosMatch) {
      sections.push({
        title: "üìé ANEXOS",
        content: anexosMatch[0].trim(),
        keywords: extractKeywords(anexosMatch[0])
      });
    }
    
    // Preparar dados para salvar no Supabase
    const bookData = {
      title: "Hist√≥ria do Adventismo em Cabo Verde",
      author: "Karl Marx Morgan Lima Monteiro",
      extracted_at: new Date().toISOString(),
      full_content: realContent,
      original_content: realContent,
      total_characters: realContent.length,
      total_words: realContent.split(/\s+/).length,
      sections: sections
    };

    // Salvar no Supabase
    const supabase = createApiClient();
    
    // Primeiro, limpar a tabela existente
    await supabase.from('book_content').delete().neq('id', 0);
    
    // Inserir novo conte√∫do
    const { data, error } = await supabase
      .from('book_content')
      .insert([bookData]);

    if (error) {
      console.error('‚ùå Erro ao salvar no Supabase:', error);
      throw new Error('Falha ao salvar no banco de dados: ' + error.message);
    }

    console.log('‚úÖ Conte√∫do salvo no Supabase com sucesso!');
    console.log(`üìã Se√ß√µes extra√≠das: ${sections.length}`);
    console.log('Dados salvos:', data);

    return NextResponse.json({
      success: true,
      message: 'Conte√∫do real do livro extra√≠do e salvo com sucesso!',
      data: {
        title: bookData.title,
        contentLength: realContent.length,
        sections: sections.length,
        extractedAt: bookData.extracted_at
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Falha na extra√ß√£o: ' + (error instanceof Error ? error.message : 'Erro desconhecido') 
      },
      { status: 500 }
    );
  }
}

// Fun√ß√£o para extrair palavras-chave
function extractKeywords(text: string): string[] {
  const keywords = [
    'pioneiros', 'fundadores', 'mission√°rios', 'igreja', 'congrega√ß√£o',
    'pastores', 'l√≠deres', 'eventos', 'confer√™ncias', 'educa√ß√£o',
    'escolas', 'miss√£o', 'evangelismo', 'crescimento', 'desenvolvimento',
    'doutrinas', 'ensino', 'organiza√ß√£o', 'jovens', 'mulheres',
    'm√∫sica', 'publica√ß√µes', 'sa√∫de', 'comunidade', 'denomina√ß√µes',
    'datas', 'locais', 'nomes', 'hist√≥ria', 'adventismo', 'cabo verde',
    'praia', 'mindelo', 'santiago', 's√£o vicente', 'fogo', 'brava',
    'santo ant√£o', 's√£o nicolau', '1923', '1927', '1930', '1940',
    '1950', '1960', '1970', '1975', '1980', '1990', '2000', '2010', '2020',
    // Nomes reais mencionados no livro
    'ant√≥nio gomes', 'alberto raposo', 'joaquim morgado', 'ernesto ferreira',
    'manuel andrade', 'nh√¥ mocho', 'nazar√© raposo', 'milca raposo',
    'jo√£o dias', 'olavo dos santos', 'alexandrino rodrigues', 'domingos sanches',
    'jo√£o f√©lix monteiro', 'marcos da rosa', 'crisolito abreu', 'guilherme vieira lima',
    'artur villares', 'joaquim tango', 'karl marx monteiro', 'irlando pereira de pina',
    // Datas importantes
    '1892', '1933', '1934', '1935', '1936', '1941', '1946', '1951', '2009', '2010', '2012',
    // Locais espec√≠ficos
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ferreiros',
    'calif√≥rnia', 'hawai', 'estados unidos', 'brasil', 's√£o paulo', 's√£o tom√© e pr√≠ncipe',
    // Informa√ß√µes espec√≠ficas sobre a primeira igreja
    'primeira igreja', 'primeira congrega√ß√£o', 'primeiro templo', 'primeiro batismo',
    'nossa senhora do monte', 'vila nova sintra', 'porto da furna', 'ilha brava',
    'ant√≥nio j gomes', 'pastor alberto raposo', 'primeiro pastor', '1935', '1936',
    'primeira miss√£o', 'primeira escola adventista', 'primeira associa√ß√£o'
  ];

  return keywords.filter(keyword => 
    text.toLowerCase().includes(keyword.toLowerCase())
  );
}
